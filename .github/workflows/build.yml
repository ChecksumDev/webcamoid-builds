name: Webcamoid CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

env:
  QTVER_ANDROID: 6.7.2
  SDKVER: 11076708
  NDKVER: r27
  ANDROID_BUILD_TOOLS_VERSION: 34.0.0
  ANDROID_MINIMUM_PLATFORM: 24
  ANDROID_TARGET_PLATFORM: 34
  NJOBS: 4
  QTIFWVER: 4.8.0
  APPIMAGEVER: continuous
  NSIS_VERSION: 3.10
  HOMEBREW_PATH: /usr/local
  FFMPEG_VERSION: 7.0.1
  GSTREAMER_VERSION: 1.24.5
  CMAKE_GENERATOR: Visual Studio 17 2022

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu x86_64
          - os: ubuntu-latest
            name: Ubuntu x86_64
            dockerimg: amd64/ubuntu:lunar
            compiler: gcc
            upload: 1
            script: linux-ubuntu
          - os: ubuntu-latest
            name: Ubuntu x86_64
            dockerimg: amd64/ubuntu:lunar
            compiler: clang
            upload: 0
            script: linux-ubuntu
          - os: ubuntu-latest
            name: Ubuntu x86_64
            dockerimg: amd64/ubuntu:rolling
            compiler: gcc
            upload: 0
            script: linux-ubuntu
          - os: ubuntu-latest
            name: Ubuntu x86_64
            dockerimg: amd64/ubuntu:rolling
            compiler: clang
            upload: 0
            script: linux-ubuntu
          # macOS
          - os: macos-14
            name: macOS
            upload: 1
            script: mac
          - os: macos-13
            name: macOS
            upload: 0
            script: mac
          - os: macos-12
            name: macOS
            upload: 1
            script: mac
          # Windows MSVC
          - os: windows-latest
            name: Windows MSVC
            script: windows-msvc
          # Windows MSYS
          - os: windows-latest
            name: Windows MSYS
            target_arch: x86_64
            compiler: gcc
            upload: 1
            script: windows-msys
          - os: windows-latest
            name: Windows MSYS
            target_arch: x86_64
            compiler: clang
            upload: 0
            script: windows-msys

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up MSYS2 (Windows MSYS only)
      uses: msys2/setup-msys2@v2
      if: matrix.script == 'windows-msys'
      with:
        update: true
        install: >-
          ccache
          clang
          cmake
          git
          make
          pkgconf
          python3
          mingw-w64-${{ matrix.target_arch }}-binutils
          mingw-w64-${{ matrix.target_arch }}-ccache
          mingw-w64-${{ matrix.target_arch }}-clang
          mingw-w64-${{ matrix.target_arch }}-cmake
          mingw-w64-${{ matrix.target_arch }}-ffmpeg
          mingw-w64-${{ matrix.target_arch }}-pkgconf
          mingw-w64-${{ matrix.target_arch }}-qt6
          mingw-w64-${{ matrix.target_arch }}-vlc

    - name: Install dependencies
      run: |
        if [ "${{ matrix.script }}" = "windows-msvc" ]; then
          ./ports/ci/${{ matrix.script }}/install_deps.bat
        elif [ "${{ matrix.script }}" = "windows-msys" ]; then
          chmod +x ports/ci/${{ matrix.script }}/install_deps.sh
          ./ports/ci/${{ matrix.script }}/install_deps.sh
        else
          chmod +x ports/ci/${{ matrix.script }}/install_deps.sh
          ./ports/ci/${{ matrix.script }}/install_deps.sh
        fi
      shell: ${{ matrix.script == 'windows-msys' && 'msys2 {0}' || 'bash' }}

    - name: Build
      run: |
        if [ "${{ matrix.script }}" = "windows-msvc" ]; then
          ./ports/ci/${{ matrix.script }}/build.bat
        elif [ "${{ matrix.script }}" = "windows-msys" ]; then
          chmod +x ports/ci/${{ matrix.script }}/build.sh
          ./ports/ci/${{ matrix.script }}/build.sh
        else
          chmod +x ports/ci/${{ matrix.script }}/build.sh
          ./ports/ci/${{ matrix.script }}/build.sh
        fi
      shell: ${{ matrix.script == 'windows-msys' && 'msys2 {0}' || 'bash' }}

    - name: Deploy
      run: |
        if [ "${{ matrix.script }}" = "windows-msvc" ]; then
          ./ports/ci/${{ matrix.script }}/deploy.bat
        elif [ "${{ matrix.script }}" = "windows-msys" ]; then
          chmod +x ports/ci/${{ matrix.script }}/deploy.sh
          ./ports/ci/${{ matrix.script }}/deploy.sh
        else
          chmod +x ports/ci/${{ matrix.script }}/deploy.sh
          ./ports/ci/${{ matrix.script }}/deploy.sh
        fi
      shell: ${{ matrix.script == 'windows-msys' && 'msys2 {0}' || 'bash' }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: webcamoid-${{ matrix.name }}
        path: webcamoid-packages/**/*

  ubuntu-multiarch:
    name: Ubuntu Multiarch
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
       include:
         - distro: ubuntu_latest
           architecture: armv7
           compiler: gcc
           upload: 1
         - distro: ubuntu_latest
           architecture: armv7
           compiler: clang
           upload: 0
         - distro: ubuntu_latest
           architecture: aarch64
           compiler: gcc
           upload: 1
         - distro: ubuntu_latest
           architecture: aarch64
           compiler: clang
           upload: 0
         - distro: ubuntu_devel
           architecture: armv7
           compiler: gcc
           upload: 0
         - distro: ubuntu_devel
           architecture: armv7
           compiler: clang
           upload: 0
         - distro: ubuntu_devel
           architecture: aarch64
           compiler: gcc
           upload: 0
         - distro: ubuntu_devel
           architecture: aarch64
           compiler: clang
           upload: 0
    steps:
    - uses: actions/checkout@v2
    - name: Build
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.architecture }}
        distro: ${{ matrix.distro }}
        githubToken: ${{ github.token }}
        dockerRunArgs: |
          -v "${{ github.workspace }}:/sources"
        env: |
          GITHUB_REF: "${{ github.ref }}"
          GITHUB_SERVER_URL: "${{ github.server_url }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"
          GITHUB_RUN_ID: "${{ github.run_id }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT_HASH: "${{ github.sha }}"
          GIT_BRANCH_NAME: "${{ github.ref_name }}"
          FILE_PASSWORD: ${{ secrets.FILE_PASSWORD }}
          QTIFWVER: ${{ env.QTIFWVER }}
          APPIMAGEVER: ${{ env.APPIMAGEVER }}
          DISTRO: ${{ matrix.distro }}
          ARCHITECTURE: ${{ matrix.architecture }}
          COMPILER: ${{ matrix.compiler }}
          NJOBS: ${{ env.NJOBS }}
          UPLOAD: ${{ matrix.upload }}
          DAILY_BUILD: 1
        run: |
          cd /sources
          chmod +x ports/ci/linux-ubuntu/install_deps.sh
          ./ports/ci/linux-ubuntu/install_deps.sh
          chmod +x ports/ci/linux-ubuntu/build.sh
          ./ports/ci/linux-ubuntu/build.sh
          chmod +x ports/ci/linux-ubuntu/deploy.sh
          ./ports/ci/linux-ubuntu/deploy.sh
          chmod +x ports/ci/linux-ubuntu/compress.sh
          ./ports/ci/linux-ubuntu/compress.sh

    - uses: actions/upload-artifact@v4
      if: ${{ matrix.upload }}
      with:
        name: ubuntu-multiarch-${{ matrix.architecture }}
        overwrite: true
        path: webcamoid-packages-*.7z

  upload-builds:
    needs: [build, ubuntu-multiarch]
    if: github.event_name == 'schedule' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
    - name: Upload Builds
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.UPLOAD_TOKEN }}
      with:
        files: ./**/*
        name: Webcamoid Daily Build
        tag_name: daily-build
        body: |
          This is an automated daily build of the Webcamoid project.
          Built from commit: ${{ github.sha }}
          
          Note: This build is automatically updated daily. The commit information may not reflect the exact state of this build.
        prerelease: true
        repository: checksumdev/webcamoid-builds
